#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        
        CALL    #lcd                    ; Chama função LCD para configurar o display
        MOV.B   #'R', R10               ; Manda a letra A para o display
        CALL    #envdad                 ; Chama função ENVIA_DADO
        
        JMP $                           ; jump to current location '$'
                                        

lcd:    MOV.B     #0x00, P3SEL            ; P3 como I/O 
        MOV.B     #0x00, P5SEL            ; P5 como I/O
        MOV.B     #0xC0, P3DIR            ; Configurando P3 para ser saída apenas em P3.6 (Enable) e P3.7 (RS)
        MOV.B     #0xFF, P5DIR            ; Configurando P5 para todos os pinos serem saída (caractere)
        
        PUSH    R10
        PUSH    R5
        
        MOV.B   #0x38, R10               ; Configura display
        CALL    #envcod
        
        MOV     #1279, R5                
        MOV     #1, R6                  ; Define delay de 5ms
        CALL    #delay                  ; Chama a função DELAY
        
        MOV.B   #0x0E, R10               ; Ativa display e cursor
        CALL    #envcod
        
        MOV.B   #0x06, R10               ; Define deslocamento do cursor
        CALL    #envcod
        
        MOV.B   #0x01, R10               ; Limpa display
        CALL    #envcod
        
        MOV     #510, R5                
        MOV     #1, R6                  ; Define delay de 2ms
        CALL    #delay                  ; Chama a função DELAY
        
        POP     R5
        POP     R10
        
        RET


envia:  PUSH    R5
        PUSH    R6
        MOV.B   #0x00, P3OUT             
        MOV.B   #0x40, P3OUT            
        MOV.B   #0x00, P3OUT            ; Gerar pulso em P3.6 (bit de enable do display)
        MOV     #23, R5
        MOV     #1, R6                  ; Define um delay de 100us
        CALL    #delay                  ; Chama a função delay para gerar um pulso no enable
        POP     R6
        POP     R5
        RET
        
envia2: PUSH    R5
        PUSH    R6
        MOV.B   #0x80, P3OUT             
        MOV.B   #0xC0, P3OUT            
        MOV.B   #0x80, P3OUT            ; Gerar pulso em P3.6 (bit de enable do display)
        MOV     #23, R5
        MOV     #1, R6                  ; Define um delay de 100us
        CALL    #delay                  ; Chama a função delay para gerar um pulso no enable
        POP     R6
        POP     R5
        RET        


envdad: MOV.B   R10, P5OUT              ; Copia dado de R3 para P5OUT
        MOV.B   #0x80, P3OUT            ; RS = 1
        CALL    #envia2                 ; Chama função ENVIA
        RET

envcod: MOV.B   R10, P5OUT               ; Copia comando de R3 para P5OUT
        MOV.B   #0x00, P3OUT            ; RS = 0
        CALL    #envia                  ; Chama a função ENVIA
        RET
        
        
delay:  PUSH R7                         ; Salva contexto de R7
        PUSH R6                         ; Salva contexto de R6
loop2:  MOV     R5, R7                  ; Valor de X é copiado para R7
loop1:  DEC     R7
        JNZ     loop1                   ; Temporização 1
        DEC     R6
        JNZ     loop2                   ; Temporização 2
        POP     R6                      ; Recupera contexto de R6
        POP     R7                      ; Recupera contexto de R7
        RET     
       
        END